     1	package cli
     2	
     3	import (
     4		"fmt"
     5		"os"
     6		"path/filepath"
     7		"strconv"
     8	
     9		"github.com/Univ-Wyo-Education/Blockchain-4010-Fall-2018/Assignments/A-04/addr"
    10		"github.com/Univ-Wyo-Education/Blockchain-4010-Fall-2018/Assignments/A-04/block"
    11		"github.com/Univ-Wyo-Education/Blockchain-4010-Fall-2018/Assignments/A-04/config"
    12		"github.com/Univ-Wyo-Education/Blockchain-4010-Fall-2018/Assignments/A-04/hash"
    13		"github.com/Univ-Wyo-Education/Blockchain-4010-Fall-2018/Assignments/A-04/index"
    14		"github.com/Univ-Wyo-Education/Blockchain-4010-Fall-2018/Assignments/A-04/lib"
    15		"github.com/Univ-Wyo-Education/Blockchain-4010-Fall-2018/Assignments/A-04/mine"
    16		"github.com/Univ-Wyo-Education/Blockchain-4010-Fall-2018/Assignments/A-04/transactions"
    17		"github.com/pschlump/MiscLib"
    18		"github.com/pschlump/godebug"
    19	)
    20	
    21	type CLI struct {
    22		GCfg       config.GlobalConfigData
    23		AllBlocks  []*block.BlockType
    24		BlockIndex index.BlockIndex
    25	}
    26	
    27	// NewCLI  returns a new command line config.
    28	func NewCLI(c config.GlobalConfigData) *CLI {
    29		return &CLI{
    30			GCfg: c,
    31		}
    32	}
    33	
    34	// BuildIndexFileName returns the name of the index.json file
    35	// with the correct path from the configuration.
    36	func (cc *CLI) BuildIndexFileName() (fnIndexPath string) {
    37		fnIndexPath = filepath.Join(cc.GCfg.DataDir, "index.json") //
    38		return
    39	}
    40	
    41	// BuildBlockFileName takes a hashStr that is the name of the JSON
    42	// file withouth the path and `.json` and combines to make a full
    43	// file name.
    44	func (cc *CLI) BuildBlockFileName(hashStr string) (fnBlockPath string) {
    45		fnBlockPath = filepath.Join(cc.GCfg.DataDir, hashStr+".json") //
    46		return
    47	}
    48	
    49	// CreateGenesis creates and writes out the genesis block and the
    50	// initial index.json files.  Theis is the ""genesis"" of the
    51	// blockchain.
    52	func (cc *CLI) CreateGenesis(args []string) {
    53		gb := block.InitGenesisBlock()
    54		os.MkdirAll(cc.GCfg.DataDir, 0755)
    55	
    56		fnIndexPath := cc.BuildIndexFileName()
    57		if lib.Exists(fnIndexPath) {
    58			fmt.Fprintf(os.Stderr,
    59				"Error: %s already exists - you will need to remove it if you"+
    60					" want to re-create a new chain.\n", fnIndexPath)
    61			os.Exit(1)
    62			return
    63		}
    64	
    65		cc.BlockIndex = index.BuildIndex(cc.AllBlocks) // Build an initial index.
    66	
    67		for _, act := range cc.GCfg.InitialAccounts {
    68			out := transactions.TxOutputType{
    69				Account:     act.Acct,
    70				Amount:      act.Value,
    71				TxOutputPos: 0, //  Position of the output in this block. In the
    72				// 					block[this].Tx[TxOffset].Output[TxOutptuPos]
    73				// TxOffset  - will be set by AppendTxToBlock
    74			}
    75			tx := &transactions.TransactionType{
    76				Output:  []transactions.TxOutputType{out},
    77				Account: cc.GCfg.AcctCoinbase,
    78				Comment: "Initial Balance",
    79			}
    80			cc.AppendTxToBlock(gb, tx)
    81		}
    82	
    83		gb.ThisBlockHash = hash.HashOf(block.SerializeBlock(gb))
    84		fn := fmt.Sprintf("%x", gb.ThisBlockHash)
    85		fnPath := cc.BuildBlockFileName(fn)
    86		if lib.Exists(fnPath) {
    87			fmt.Fprintf(os.Stderr, "Error: %s already exists - you will need to remove it "+
    88				"if you want to re-create a new chain.\n", fnPath)
    89			os.Exit(1)
    90			return
    91		}
    92	
    93		cc.AppendBlock(gb) // Append block to list of blocks, set the index postion.  Write block and index.
    94	
    95	}
    96	
    97	// TestReadBlock Test code for command line.
    98	func (cc *CLI) TestReadBlock(args []string) {
    99		fnPath := cc.BuildBlockFileName("29e68e530d0718dd01759e8c9a5276d20687bc5ec23e60dce063c2b97ba6b04f")
   100		if !lib.Exists(fnPath) {
   101			fmt.Printf("You must run \"create-genesis\" first before this test.\n")
   102			os.Exit(1)
   103		}
   104		_, err := block.ReadBlock(fnPath)
   105		if err != nil {
   106			fmt.Printf("FAIL\n")
   107			os.Exit(1)
   108		}
   109		fmt.Printf("PASS\n")
   110	}
   111	
   112	// TestWriteBlock Test code for command line.
   113	func (cc *CLI) TestWriteBlock(args []string) {
   114		// Initialize a block
   115		bk := block.InitBlock(12, "Good Morning 4010/5010 class", []byte{1, 2, 3, 4})
   116		// Write out that block
   117		err := block.WriteBlock(cc.BuildBlockFileName("TestWriteBlock"), bk)
   118		if err != nil {
   119			fmt.Printf("FAIL\n")
   120			os.Exit(1)
   121		}
   122		fmt.Printf("PASS\n")
   123	}
   124	
   125	// TestSendFunds will process command argumetns and walk through the transaction process
   126	// of sending funds once.  This is essentially the transaction process - but driven from
   127	// the command line.
   128	func (cc *CLI) TestSendFunds(args []string) {
   129	
   130		// In Assignment 5: args should be 6 - FromAddress, ToAddress, AmountToSend, Signature, MsgHash, Msg, Memo
   131		//			Last 4 args can just be 'x' for the moment - placeholders - not checked - not used.
   132		if len(args) != 7 {
   133			fmt.Fprintf(os.Stderr, "Should have 6 argumetns after the flag.  FromAddress, ToAddress, AmountToDend, x, x, x\n")
   134			os.Exit(1)
   135			return
   136		}
   137	
   138		// -----------------------------------------------------------------------------
   139		// Read in index and all of the blocks.
   140		// -----------------------------------------------------------------------------
   141		cc.ReadGlobalConfig()
   142	
   143		// fmt.Printf("%sSUCCESS #1 - Read in the index and the blocks!%s\n", MiscLib.ColorGreen, MiscLib.ColorReset)
   144		// fmt.Printf("%s        #1 - AT: %s%s\n", MiscLib.ColorGreen, godebug.LF(), MiscLib.ColorReset)
   145	
   146		// -----------------------------------------------------------------------------
   147		// Do the send funds stuff
   148		// -----------------------------------------------------------------------------
   149		from := addr.MustParseAddr(args[0])
   150		to := addr.MustParseAddr(args[1])
   151		amt64, err := strconv.ParseInt(args[2], 10, 64)
   152		if err != nil {
   153			fmt.Fprintf(os.Stderr, "Invalid parse of amout [%s] error [%s]\n", args[2], err)
   154			os.Exit(1)
   155		}
   156		amount := int(amt64) // type cast from int64 to int
   157		if amount <= 0 {     // Validate that no negative amount is used.
   158			fmt.Fprintf(os.Stderr, "Amount is out of range - can not send 0 or negative amounts [%d]\n", amount)
   159			os.Exit(1)
   160		}
   161	
   162		//
   163	
   164		// bk := transactions.NewEmptyBlock()
   165		bk := cc.NewEmptyBlock()
   166		lib.Assert(bk.Index == len(cc.AllBlocks))
   167	
   168		tx, err := cc.SendFundsTransaction(from, lib.SignatureType(args[3]), args[4], args[5], to, amount, args[6])
   169		if err != nil {
   170			fmt.Fprintf(os.Stderr, "Unable to transfer error [%s]\n", err)
   171			os.Exit(1)
   172			return
   173		}
   174		cc.AppendTxToBlock(bk, tx)
   175	
   176		// -----------------------------------------------------------------------------
   177		// Write out updated index and new block at end.
   178		// -----------------------------------------------------------------------------
   179		cc.AppendBlock(bk)
   180	
   181	}
   182	
   183	// SendFundsTransaction is the core chunk of moving funds from one account to
   184	// another.
   185	//
   186	// This is your homework.  Finish out this function and test.
   187	//
   188	func (cc *CLI) SendFundsTransaction(
   189		from addr.AddressType, // account to transfer from
   190		sig lib.SignatureType, // not used yet - ditital signature - Assignment 5
   191		messageHash, //           not used yet - hash of message - Assignment 5
   192		message string, //        not used yet - JSON message - Assignment 5
   193		to addr.AddressType, //   account to send funds to
   194		amount int, //            Amount of funds to send
   195		memo string, //           Memo to add to transaction (Comment)
   196	) (
   197		tx *transactions.TransactionType,
   198		err error,
   199	) {
   200		if !lib.ValidSignature(sig, messageHash, from) { // Assignment 5 implements, just true for now.
   201			return nil, fmt.Errorf("Signature not valid")
   202		}
   203		// TODO - validate that message - after it is parse, has from/to/amount - and
   204		// that the hash of messageHash is 'message'.  Assignment 5.
   205	
   206		// --- Homework Section for Assignment 4 ----------------------------
   207		// Replace the line below with code that performs a transaction
   208		return cc.InstructorSendFundsTransaction(from, sig, messageHash, message, to, amount, memo)
   209	
   210		//
   211		// Pseudo Code:
   212		// 1. Calcualte the total value of the account 'from'.  Call this 'tot'.
   213		//    You can do this by calling `cc.GetTotalValueForAccount(from)`.
   214		// 2. If the total, `tot` is less than the amount that is to be transfered,
   215		//	  `amount` then fail.  Return an error "Insufficient funds".  The person
   216		//    is trying to bounce a check.
   217		// 3. Get the list of output tranactions ( ../transactions/tx.go TxOutputType ).
   218		//    Call this 'oldOutputs'.
   219		// 4. Find the set of (may be empty - check for that) values that are pointed
   220		//    to in the index - from the 'from' account.  Delete this from the
   221		//    index.
   222		// 5. Create a new empty transaction.  Call `transctions.NewEmptyTx` to create.
   223		//	  Pass in the 'memo' and the 'from' for this tranaction.
   224		// 6. Convert the 'oldOutputs' into a set of new inputs.  The type is
   225		//    ../transctions/tx.go TxInputType.  Call `transactions.CreateTxInputsFromOldOutputs`
   226		//	  to do this.
   227		// 7. Save the new inputs in the tx.Input.
   228		// 8. Create the new output for the 'to' address.  Call `transactions.CreateTxOutputWithFunds`.
   229		//    Call this `txOut`.    Take `txOut` and append it to the tranaction by calling
   230		//    `transactions.AppendTxOutputToTx`.
   231		// 9. Calcualte the amount of "change" - if it is larger than 0 then we owe 'from'
   232		//    change.  Create a 2nd tranaction with the change.  Append to the tranaction the
   233		//    TxOutputType.
   234		// 10. Return
   235		//
   236	}
   237	
   238	func (cc *CLI) NewEmptyBlock() (bk *block.BlockType) {
   239		lastBlock := len(cc.AllBlocks) - 1
   240		prev := cc.AllBlocks[lastBlock].ThisBlockHash
   241		bk = block.InitBlock(len(cc.AllBlocks), "" /*block-comment-TODO*/, prev)
   242		return
   243	}
   244	
   245	// ListAccounts will walk through the index and find all the accounts, construct a non-dup
   246	// list the accounts and print it out.
   247	//
   248	// Improvement - this could be split into a library function to get the accoutns and
   249	// then just print.
   250	func (cc *CLI) ListAccounts(args []string) {
   251		cc.ReadGlobalConfig()
   252		// Go through index - and list out the accounts.
   253		accts := make(map[string]bool)
   254		for key := range cc.BlockIndex.FindValue.AddrIndex {
   255			fmt.Printf("Search Tx for Addr: %s\n", key)
   256			accts[key] = true
   257		}
   258		for key := range cc.BlockIndex.AddrData.AddrIndex {
   259			fmt.Printf("Search SC for Addr: %s\n", key)
   260			accts[key] = true
   261		}
   262		fmt.Printf("\nList of Addresses\n")
   263		for key := range accts { // TODO : Should this be sorted?  If so why?
   264			fmt.Printf("\t%s\n", key)
   265		}
   266	}
   267	
   268	// ShowBalance will use the index to find an account, then walk through all the
   269	// unused outputs (the balance) and add that up.  Then it will print out the
   270	// balance for that account.
   271	func (cc *CLI) ShowBalance(args []string) {
   272		cc.ReadGlobalConfig()
   273	
   274		if len(args) != 1 {
   275			fmt.Fprintf(os.Stderr, "Should have 1 argumetn after the flag.  AcctToList\n")
   276			os.Exit(1)
   277			return
   278		}
   279	
   280		acct := addr.MustParseAddr(args[0])
   281	
   282		fmt.Printf("Acct: %s Value: %d\n", acct, cc.GetTotalValueForAccount(acct))
   283	}
   284	
   285	// GetTotalValueForAccount walks the index finding all the non-zero tranactions for an
   286	// account and adds up the total value for the account.
   287	func (cc *CLI) GetTotalValueForAccount(acct addr.AddressType) (sum int) {
   288	
   289		unusedOutput := cc.BlockIndex.FindValue.AddrIndex[fmt.Sprintf("%s", acct)]
   290		// fmt.Fprintf(os.Stderr, "Acct: [%s] cc=%s AT:%s\n", acct, lib.SVarI(cc), godebug.LF())
   291	
   292		sum = 0
   293		for _, blockLoc := range unusedOutput.Value {
   294			if db4 {
   295				fmt.Fprintf(os.Stderr, "blocLoc: [%s] acct[%s] AT:%s\n", lib.SVarI(blockLoc), acct, godebug.LF())
   296			}
   297	
   298			lib.Assert(blockLoc.BlockIndex >= 0 && blockLoc.BlockIndex < len(cc.AllBlocks))
   299			bk := cc.AllBlocks[blockLoc.BlockIndex]
   300	
   301			if bk.Tx != nil {
   302	
   303				lib.Assert(blockLoc.TxOffset >= 0 && blockLoc.TxOffset < len(bk.Tx))
   304				tx := bk.Tx[blockLoc.TxOffset]
   305	
   306				if tx.Output != nil {
   307	
   308					lib.Assert(blockLoc.TxOutputPos >= 0 && blockLoc.TxOutputPos < len(tx.Output))
   309					out := tx.Output[blockLoc.TxOutputPos]
   310	
   311					lib.Assert(out.Amount >= 0)
   312					sum += out.Amount
   313	
   314					// fmt.Printf("bottom of loop: sum=[%d] AT:%s\n", sum, godebug.LF())
   315				}
   316			}
   317		}
   318	
   319		lib.Assert(sum >= 0)
   320		return
   321	}
   322	
   323	// GetNonZeroForAccount returns a slice of tranactions that have a positive (Non-Zero) balance.
   324	// This is the set of output tranactions that will need to be turned into input tranactions
   325	// to make a funds transfer occure.
   326	func (cc *CLI) GetNonZeroForAccount(acct addr.AddressType) (rv []*transactions.TxOutputType) {
   327	
   328		unusedOutput := cc.BlockIndex.FindValue.AddrIndex[fmt.Sprintf("%s", acct)]
   329	
   330		for _, blockLoc := range unusedOutput.Value {
   331			if db6 {
   332				fmt.Fprintf(os.Stderr, "blocLoc: [%s] acct[%s] AT:%s\n", lib.SVarI(blockLoc), acct, godebug.LF())
   333			}
   334	
   335			lib.Assert(blockLoc.BlockIndex >= 0 && blockLoc.BlockIndex < len(cc.AllBlocks))
   336			bk := cc.AllBlocks[blockLoc.BlockIndex]
   337	
   338			if bk.Tx != nil {
   339	
   340				lib.Assert(blockLoc.TxOffset >= 0 && blockLoc.TxOffset < len(bk.Tx))
   341				tx := bk.Tx[blockLoc.TxOffset]
   342	
   343				if tx.Output != nil {
   344	
   345					lib.Assert(blockLoc.TxOutputPos >= 0 && blockLoc.TxOutputPos < len(tx.Output))
   346					out := tx.Output[blockLoc.TxOutputPos]
   347	
   348					if out.Amount > 0 {
   349						rv = append(rv, &out)
   350					}
   351				}
   352			}
   353		}
   354	
   355		return
   356	}
   357	
   358	// AppendTxToBlock takes a transaction and appends it to the set of transactions in the
   359	// block.  TxOffset values for transaction outputs have to be set.  The BlockNo is
   360	// also set to the current blocks.  If the list of addresses,
   361	// cc.BLockIndex.FindValue.AddrIndex is nil then the map is allocated.
   362	func (cc *CLI) AppendTxToBlock(bk *block.BlockType, tx *transactions.TransactionType) {
   363		Offset := len(bk.Tx)
   364		tx.TxOffset = Offset
   365		for ii := range tx.Output {
   366			tx.Output[ii].BlockNo = bk.Index
   367			tx.Output[ii].TxOffset = Offset
   368		}
   369		bk.Tx = append(bk.Tx, tx)
   370	
   371		if cc.BlockIndex.FindValue.AddrIndex == nil {
   372			// fmt.Printf("Allocate space for: cc.BlockIndex.FindValue.AddrIndex, AT: %s\n", godebug.LF())
   373			cc.BlockIndex.FindValue.AddrIndex = make(map[string]index.TxWithValue)
   374		}
   375	
   376		// --------------------------------------------------------------------------------
   377		// Check to see if existing value exists in account.
   378		// --------------------------------------------------------------------------------
   379		hashKey := fmt.Sprintf("%s", tx.Account)
   380		_, hasValueNow := cc.BlockIndex.FindValue.AddrIndex[hashKey]
   381		if db2 {
   382			fmt.Printf("Append: hasValueNow = %v, AT:%s\n", hasValueNow, godebug.LF())
   383		}
   384	
   385		// Find all outputs - add them to index
   386		for ii, out := range tx.Output {
   387	
   388			aTxWithValue := index.TxWithValue{
   389				Addr: out.Account, // Address of destination account for output
   390				Value: []index.TxWithAValue{{
   391					BlockIndex:  bk.Index,
   392					TxOffset:    Offset, // position of this Tx in the array of Tx in the block, this is in block.Tx[TxOffset]
   393					TxOutputPos: ii,     // positon of the output with a positive value in the transaction, block.Tx[TxOffset].Output[TxOutputPos]
   394				}}, // List of Values in a set of blocks, may have more than one value per block.
   395			}
   396	
   397			hashKey := fmt.Sprintf("%s", out.Account)
   398			if val, has := cc.BlockIndex.FindValue.AddrIndex[hashKey]; has {
   399				for _, av := range aTxWithValue.Value {
   400					val.Value = append(val.Value, av)
   401					cc.BlockIndex.FindValue.AddrIndex[hashKey] = val
   402				}
   403			} else {
   404				cc.BlockIndex.FindValue.AddrIndex[hashKey] = aTxWithValue
   405			}
   406		}
   407	}
   408	
   409	// ReadGlobalConfig reads in the index and all of the blocks.
   410	func (cc *CLI) ReadGlobalConfig() {
   411	
   412		// -------------------------------------------------------------------------------
   413		// Read in index and blocks.
   414		// -------------------------------------------------------------------------------
   415	
   416		// Read in index so that we know what all the hashs for the blocks are.
   417		fnIndexPath := cc.BuildIndexFileName()          //
   418		BlockIndex, err := index.ReadIndex(fnIndexPath) //
   419		if err != nil {
   420			fmt.Fprintf(os.Stderr, "Error reading index [%s] error [%s]\n", fnIndexPath, err)
   421			os.Exit(1)
   422		}
   423		cc.BlockIndex = *BlockIndex
   424	
   425		if db5 {
   426			fmt.Fprintf(os.Stderr, "dbg: AT: %s ->%s<-\n", godebug.LF(), cc.BlockIndex.Index)
   427		}
   428		for ii, key := range cc.BlockIndex.Index {
   429			// fmt.Printf("dbg: AT: %s ->%s<-\n", godebug.LF(), key)
   430			fnBlock := cc.BuildBlockFileName(key) // take the key, hash of block as a string, and generate file name.
   431			aBk, err := block.ReadBlock(fnBlock)
   432			if err != nil {
   433				fmt.Fprintf(os.Stderr, "Error reading block [%s] error [%s]\n", fnBlock, err)
   434				os.Exit(1)
   435			}
   436			lib.Assert(aBk.Index == ii)
   437			cc.AllBlocks = append(cc.AllBlocks, aBk)
   438			if db5 {
   439				fmt.Fprintf(os.Stderr, "Read In ii=%d Block[%d] Hash[%x]\n", ii, aBk.Index, aBk.ThisBlockHash)
   440			}
   441		}
   442	}
   443	
   444	// AppendBlock appends a new block to the set of blocks in the blockchain.
   445	// The block mining reward will be added as the last transaction in the block.
   446	// Mining will be performed to seal the block.  The block will be written
   447	// out to the file system and the index of blocks is updated.  Verification
   448	// occures that the block has produced a unique hash.  (Hash Collisions
   449	// are possible but very rare - It would be simple to add a fix so that if
   450	// you get a collision it fixes it.  This has not been done).
   451	func (cc *CLI) AppendBlock(bk *block.BlockType) {
   452		bk.Index = len(cc.AllBlocks)
   453	
   454		// -------------------------------------------------------------------------------
   455		// add in Tx for mining reward
   456		// -------------------------------------------------------------------------------
   457		tx := transactions.NewEmptyTx("Mining Reward", cc.GCfg.AcctCoinbase)
   458		txOut, err := transactions.CreateTxOutputWithFunds(cc.GCfg.AcctCoinbase, cc.GCfg.MiningReward)
   459		if err != nil {
   460			fmt.Fprintf(os.Stderr, "Unable to supply mining reward error [%s]\n", err)
   461			os.Exit(1)
   462			return
   463		}
   464		transactions.AppendTxOutputToTx(tx, txOut)
   465		cc.AppendTxToBlock(bk, tx)
   466	
   467		// -------------------------------------------------------------------------------
   468		// Calculate hash for block now that the transactions are complete.
   469		// -------------------------------------------------------------------------------
   470		if db1 {
   471			hd := block.SerializeBlock(bk)
   472			fmt.Printf("Searilized Block: %x\n", hd)
   473		}
   474		bk.ThisBlockHash = hash.HashOf(block.SerializeBlock(bk))
   475	
   476		if db6 {
   477			fmt.Printf("%sbk.ThisBlockHash = %x, AT:%s%s\n", MiscLib.ColorCyan, bk.ThisBlockHash,
   478				godebug.LF(), MiscLib.ColorReset)
   479		}
   480	
   481		// Verify hash is unique - never seen before.
   482		if _, ok := cc.BlockIndex.BlockHashToIndex[fmt.Sprintf("%x", bk.ThisBlockHash)]; ok {
   483			lib.Assert(false)
   484		}
   485	
   486		// -------------------------------------------------------------------------------
   487		// Mine the block
   488		// -------------------------------------------------------------------------------
   489		mine.MineBlock(bk, cc.GCfg.MiningDifficulty)
   490	
   491		// -------------------------------------------------------------------------------
   492		// Update the block index - this is the hard part.
   493		// -------------------------------------------------------------------------------
   494		cc.BlockIndex.Index = append(cc.BlockIndex.Index, fmt.Sprintf("%x", bk.ThisBlockHash))
   495		if cc.BlockIndex.BlockHashToIndex == nil {
   496			cc.BlockIndex.BlockHashToIndex = make(map[string]int)
   497		}
   498		cc.BlockIndex.BlockHashToIndex[fmt.Sprintf("%x", bk.ThisBlockHash)] = bk.Index
   499		cc.AllBlocks = append(cc.AllBlocks, bk) // put in set of global blocks:
   500	
   501		// -------------------------------------------------------------------------------
   502		// Write out both the block and the updated index.
   503		// -------------------------------------------------------------------------------
   504		fnPath := cc.BuildBlockFileName(fmt.Sprintf("%x", bk.ThisBlockHash))
   505		fnIndexPath := cc.BuildIndexFileName()
   506		err = index.WriteIndex(fnIndexPath, &cc.BlockIndex) // write index
   507		if err != nil {
   508			fmt.Fprintf(os.Stderr, "Unable to write index to [%s] error [%s]\n", fnIndexPath, err)
   509			os.Exit(1)
   510			return
   511		}
   512		err = block.WriteBlock(fnPath, bk)
   513		if err != nil {
   514			fmt.Fprintf(os.Stderr, "Unable to write block to [%s] error [%s]\n", fnPath, err)
   515			os.Exit(1)
   516			return
   517		}
   518	}
   519	
   520	// Debug flags to turn on output in sections of the code.
   521	const db1 = false
   522	const db2 = false
   523	const db3 = false
   524	const db4 = false
   525	const db5 = false
   526	const db6 = false
